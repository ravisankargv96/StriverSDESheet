package Solutions.LinkedList;

//Check the pdf solution for explanation

import Solutions.Blocks.ListNode;

public class PalindromeCheck {

    public ListNode recursive(ListNode head) {
        // Below algo handles the edge cases i.e. head == null
        // eg. 1 -> 2 -> 3 -> 4 -> 5
        ListNode prev = null;
        ListNode curr = head;

        while(curr != null){
            ListNode next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }

        return prev;
    }
    
    public boolean isPalindrome(ListNode head) {

        ListNode slow = head;
        ListNode fast = head;

        ListNode prev, temp;

        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        prev = slow;
        slow = slow.next;

        prev.next = null;

        while (slow != null) {
            temp = slow.next;
            slow.next = prev;
            prev = slow;
            slow = temp;
        }
        
        fast = head;
        slow = prev;
        while (slow != null) {
            if (fast.val != slow.val) return false;
            fast = fast.next;
            slow = slow.next;
        }
        return true;
    }
}
