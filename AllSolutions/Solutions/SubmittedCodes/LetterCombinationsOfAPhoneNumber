unordered_map<char,vector<char>> getMappedValues()
{
    unordered_map<char,vector<char>> umap;

    umap = {{'2',vector<char>({'a','b','c'})},
            {'3',vector<char>({'d','e','f'})},
            {'4',vector<char>({'g','h','i'})},
            {'5',vector<char>({'j','k','l'})},
            {'6',vector<char>({'m','n','o'})},
            {'7',vector<char>({'p','q','r','s'})},
            {'8',vector<char>({'t','u','v'})},
            {'9',vector<char>({'w','x','y','z'})}};

    return umap;
}

vector<string> getOutput(vector<vector<char>> ans)
{
    vector<string> res;
    for(int i = 0; i<ans.size(); i++)
    {
        string s = "";
        for(int j = 0; j<ans[i].size(); j++)
        {
            s += ans[i][j];
        }
        if(s != "")
        {
            res.push_back(s);
        }
    }

    return res;
}

void combination(string digits, int pos,
                 unordered_map<char,vector<char>> hm,
                vector<char>& v, vector<vector<char>>& ans)
{
    //
    if(pos == digits.size())
    {
        ans.push_back(v);
        return;
    }

    char num = digits[pos];
    for(int i = 0; i<hm[num].size(); i++)
    {
        v.push_back(hm[num][i]);
        combination(digits,pos+1,hm,v,ans);
        v.pop_back();
    }
}

class Solutions.Solution {
public:
    vector<string> letterCombinations(string digits) {

        unordered_map<char,vector<char>> hm = getMappedValues();

        vector<char> v;
        vector<vector<char>> ans;

        combination(digits,0,hm,v,ans);

        return getOutput(ans);

    }
};