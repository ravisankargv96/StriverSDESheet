void bfs(vector<vector<int>>& vis, vector<vector<char>>& grid,
         pair<int,int> pos, vector<pair<int,int>>& dir)
{
    vis[pos.first][pos.second] = 1;

    queue<pair<int,int>> q;
    q.push(pos);

    while(!q.empty())
    {
        pair<int,int> point = q.front();
        q.pop();

        for(int k = 0; k<dir.size(); k++)
        {
            pair<int,int> npoint = {point.first + dir[k].first ,
                                    point.second + dir[k].second};

            bool bound_i = (0 <= npoint.first &&
                            npoint.first < grid.size());
            bool bound_j = (0 <= npoint.second && npoint.second < grid[0].size());

            if(bound_i && bound_j && vis[npoint.first][npoint.second] != 1
               && grid[npoint.first][npoint.second] == '1')
            {
                vis[npoint.first][npoint.second] = 1;
                q.push(npoint);
            }
        }
    }
}

void dfs(vector<vector<int>> &vis, vector<vector<char>>& grid,
        pair<int,int> pos, vector<pair<int,int>>& dir)
{
    vis[pos.first][pos.second] = 1;

    for(int k = 0; k<dir.size(); k++)
    {
        pair<int,int> newpos = {pos.first + dir[k].first,
                                pos.second + dir[k].second};
        bool bound_i = (0 <= newpos.first && newpos.first < grid.size());
        bool bound_j = (0 <= newpos.second && newpos.second < grid[0].size());

        if(bound_i && bound_j && vis[newpos.first][newpos.second] != 1
          && grid[newpos.first][newpos.second] == '1')
        {
            dfs(vis,grid,newpos,dir);
        }
    }
}

class Solutions.Solution {
public:
    int numIslands(vector<vector<char>>& grid) {

        int islands = 0;
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> vis(m,vector<int>(n,0));

        //R,D,L,U
        vector<pair<int,int>> dir = {{0,1},
                                     {1,0},
                                     {0,-1},
                                     {-1,0}};

        for(int i = 0; i<grid.size(); i++)
        {
            for(int j = 0; j<grid[0].size(); j++)
            {
                if(vis[i][j] != 1 && grid[i][j] == '1')
                {
                    //bfs(vis,grid,pair<int,int>(i,j),dir);
                    dfs(vis,grid,pair<int,int>(i,j),dir);
                    islands++;
                }
            }
        }

        return islands;

    }
};