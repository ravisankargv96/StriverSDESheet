bool isValid(vector<int> vec,int pos,int ele,int n)
{
    vector<int> row(n,0);
    vector<int> col(n,0);
    vector<int> dia(2*n - 1,0);
    vector<int> pdia(2*n - 1,0);

    //initializing attacking positions
    for(int i = 0; i<n; i++)
    {
        if(vec[i] != -1)
        {
            row[i] = 1;
            col[vec[i]] = 1;
            dia[i+vec[i]] = 1;
            pdia[n-1+vec[i]-i] = 1;
        }
    }

    return (row[pos] != 1 && col[ele] != 1) &&
        (dia[pos+ele] != 1 && pdia[n-1+ele-pos] != 1);
}

void NQueens(vector<int> col,int pos,int n, vector<vector<int>>& ans)
{
    //base
    if(pos == n)
    {
        ans.push_back(col);
        return;
    }

    for(int i = 0; i<n; i++)
    {
        if(isValid(col,pos,i,n))
        {
            col[pos] = i;
            NQueens(col,pos+1,n,ans);
            col[pos] = -1;
        }
    }
}

vector<vector<string>> Board(vector<vector<int>> ans,int n)
{
    vector<vector<string>> res;

    for(vector<int> vec: ans)
    {
        vector<string> sol;
        for(int i = 0; i<n; i++)
        {

            int ele = vec[i];

            string row = "";
            for(int j = 0; j<n; j++)
            {
                if(j == ele)
                {
                    row += "Q";
                }
                else
                {
                    row += ".";
                }
            }

            sol.push_back(row);
        }

        res.push_back(sol);
    }

    return res;
}

class Solutions.Solution {
public:
    vector<vector<string>> solveNQueens(int n) {

        vector<int> col(n,-1);
        vector<vector<int>> ans;
        NQueens(col,0,n,ans);
        vector<vector<string>> result = Board(ans,n);

        return result;


    }
};